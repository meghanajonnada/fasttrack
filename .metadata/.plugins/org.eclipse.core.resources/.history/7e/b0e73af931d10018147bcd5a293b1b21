package com.mulesoft.qs.fasttrack.utilities;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Properties;
import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.Platform;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;

import com.mulesoft.qs.fasttrack.cucumberhooks.CucumberHooks;
import com.mulesoft.qs.fasttrack.stepdefinitions.HomePageStepDefinitions;
import com.mulesoft.qs.fasttrack.stepdefinitions.LoginStepDefinitions;





public abstract class FrameworkUtility {

	public static WebDriver driver;
	public Select select;
	protected Alert alert;
	protected static Properties properties;
	public  String URL;
	protected static String browserName;
	public JavaScriptActions jsActions;
	public  JavascriptExecutor js;
	public  WebDriverWait wait;
	public  CustomWait Wait;
	protected static WindowActions WindowHandler;
	protected  AlertActions AlertHandler;
	public  KeyboardActions KeyboardHandler;
	public CucumberHooks cucumberHooks;
	public HomePageStepDefinitions homePageStepDefinitions;
	public LoginStepDefinitions loginStepDefinitions;


	protected ThreadLocal<RemoteWebDriver> threadDriver;
	protected URL hubURL;
	
	static final Logger logger = Logger.getLogger(FrameworkUtility.class);


	public  void initilizeRemoteDriver(String browserName) throws NoSuchFieldException, MalformedURLException 
	{
		URL ="http://25.10.30.102/login";
		
//		URL ="http://7.65.10.52/login";

		try
		{

			String platform_name,Proxy,HubURLaddress,gridExecution;
			DesiredCapabilities capabilities = new DesiredCapabilities();
			platform_name=getOSName();
//			Proxy=readConfigurationFile("Proxy");
//			HubURLaddress=readConfigurationFile("HubURL");
			HubURLaddress="http://25.10.30.100:4444//wd/hub";
//			org.openqa.selenium.Proxy proxy=new org.openqa.selenium.Proxy();
			threadDriver = new ThreadLocal<RemoteWebDriver>();
			if (browserName.equalsIgnoreCase("chrome"))
			{
				ChromeOptions options = new ChromeOptions();
				DesiredCapabilities dc=DesiredCapabilities.chrome();
		/*		proxy.setHttpProxy(Proxy);
				proxy.setFtpProxy(Proxy);
				proxy.setSslProxy(Proxy); */
				options.addArguments("disable-infobars"); 
				if (platform_name.equalsIgnoreCase("linux"))
				{
					options.addArguments(Arrays.asList("--window-position=0,0"));
					options.addArguments(Arrays.asList("--window-size=1440,900"));	
				} 
				else 
				{
					options.addArguments(Arrays.asList("--start-maximized"));
				}
				capabilities.setCapability(ChromeOptions.CAPABILITY, options);
//				capabilities.setCapability(CapabilityType.PROXY, proxy);
			} 
			hubURL=new URL(HubURLaddress);
			threadDriver.set(new RemoteWebDriver(hubURL, capabilities));
			driver=getdriver();
			driver.get(URL);
			setALLDriver(driver);
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}

	public  WebDriver initilizeLocalDriver(String browserName) {
	
//		URL ="http://25.10.30.102/login";
		URL ="http://7.65.10.52/login";

		
		if(URL.trim().length() > 0){
			if (browserName.trim().equalsIgnoreCase("firefox")) {
				System.setProperty(FrameworkConstants.GECKO_DRIVER_KEY,FrameworkConstants.FIREFOX_DRIVER_PATH);
				driver = new FirefoxDriver();
				driver.manage().window().maximize();
				//				initObjects();
				driver.get(URL);
				setALLDriver(driver);

			}
			else if (browserName.trim().equalsIgnoreCase("chrome")) {
				System.setProperty(FrameworkConstants.CHROME_DRIVER_KEY,FrameworkConstants.CHROME_DRIVER_PATH);
				driver = new ChromeDriver();
				driver.manage().window().maximize();
				//				initObjects();
				driver.get(URL);
				setALLDriver(driver);

			}
			else if (browserName.trim().equalsIgnoreCase("ie")) {
				System.setProperty(FrameworkConstants.IE_DRIVER_KEY,FrameworkConstants.IE_DRIVER_PATH);
				DesiredCapabilities capabilities = DesiredCapabilities.internetExplorer();
				capabilities.setCapability(InternetExplorerDriver.IE_ENSURE_CLEAN_SESSION, true);	
				capabilities.setCapability(InternetExplorerDriver.ENABLE_PERSISTENT_HOVERING, false);
				capabilities.setCapability(InternetExplorerDriver.NATIVE_EVENTS, true);
				driver = new InternetExplorerDriver();
				driver.manage().window().maximize();
				//				initObjects();
				setALLDriver(driver);
			
			}else {
				System.out.println("Invalid BrowserName");
				throw new IllegalStateException("Failed to invoke WebBrowser.Invalid BrowserName..");
			}
		}
		return driver;
	}

	public  void initObjects() {
		try
		{
			js = (JavascriptExecutor) driver;
			jsActions = new JavaScriptActions(driver);
//			action = new Actions(driver);
			Wait = new CustomWait(driver);
			WindowHandler = new WindowActions();
			AlertHandler = new AlertActions(driver);
			KeyboardHandler = new KeyboardActions(driver);
	/*		loginStepDefinitions=new LoginStepDefinitions(driver);
			homePageStepDefinitions=new HomePageStepDefinitions(driver);
			cucumberHooks.CucumberHooks1(driver);*/
			
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();}
	}

	public synchronized String getOSName() 
	{
		String os = System.getProperty("os.name").toLowerCase();
		if (os.contains("win"))
		{
			return "Windows";
		}
		else if (os.contains("nux") || os.contains("nix"))
		{
			return "Linux";
		}
		else if (os.contains("mac")) {
			return "Mac";
		}
		else if (os.contains("sunos")) {
			return "Solaris";
		}
		else {
			return "Other";
		}
	}

	protected String getStackTrace(Throwable t) {
		StringWriter sw = new StringWriter();
		PrintWriter pw = new PrintWriter(sw);
		try
		{
			t.printStackTrace(pw);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return sw.toString();

	}

	protected Date getTime(long millis) {
		Calendar calendar = Calendar.getInstance();
		try
		{
			calendar.setTimeInMillis(millis);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return calendar.getTime();
	}
	
	public WebDriver getdriver()
	{
		
		return threadDriver.get();
	}

	public void setDriver(WebDriver driver)
	{
		System.out.println(driver);
		this.driver=driver;
	}

	public void setALLDriver(WebDriver driver)
	{
		setDriver(driver);
		initObjects();
	}

	public String getFileName(String filePath)
	{
		String fileName;
		Path p = Paths.get(filePath);
		fileName= p.getFileName().toString();

		return fileName;

	}

	public void mouseHover(WebElement webelement) {
		try {
			Actions action=new Actions(driver);
//			action = new Actions(driver);
			action.moveToElement(webelement).build().perform();	
		}catch (NoSuchElementException e) {
			e.printStackTrace();
		}
	}
	public static synchronized String readConfigurationFile(String key) throws NoSuchFieldException {
		try{
			properties = new Properties();
			properties.load(new FileInputStream(FrameworkConstants.CONFIG_FILE_PATH));
			return properties.getProperty(key).trim();	
		} catch (Exception e){
			throw new NoSuchFieldException("Cannot find key: "+key+" in Config file.");
		}
	}

	public void clearText(WebElement webelement)
	{
		Wait.forElementToBeVisibleAndEnabled(webelement);
		webelement.clear();
	}

	public void enterText(WebElement webelement, String value) {
		Wait.forElementToBeVisibleAndEnabled(webelement);
		webelement.clear();
		webelement.sendKeys(value);
	}

	public void enterText(WebElement webelement, Keys keys) {
		Wait.forElementToBeVisibleAndEnabled(webelement);
		webelement.sendKeys(keys);
	}

	public void switchToDefaultContent()
	{
		Wait.forXseconds(2);
		driver.switchTo().defaultContent();
		Wait.forXseconds(4);

	}

	public void switchToFrame(int frame)
	{
		Wait.forXseconds(2);
		driver.switchTo().frame(frame);
		Wait.forXseconds(4);

	}

	public boolean isDisplayed(WebElement webelement)
	{	
		boolean flag;
		try{
			Wait.forElementVisibility(webelement);
			if(webelement.isDisplayed()==true)
			{
				flag=true;
			}
			else
			{
				flag=false;
			}
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			flag=false;

		}
		System.out.println(flag);

		return flag;
	}

	public void clickElement(WebElement webelement) {

		Wait.forElementToBeVisibleAndEnabled(webelement);
		webelement.click();
	}

	public void selectCheckBox(WebElement webelement, String status) {
		Wait.forElementToBeVisibleAndEnabled(webelement);
		if (status.equalsIgnoreCase("On")) {
			if (!webelement.isSelected()) {
				clickElement(webelement);
			} 
		}else if(status.equalsIgnoreCase("Off")) {
			if (webelement.isSelected()) {
				clickElement(webelement);
			}
		}
	}
	
	public String getAbsolutePath(String relativeFilepath)
	{
		String absoluepath;
		File file =new File(relativeFilepath);
		absoluepath=file.getAbsolutePath();
		absoluepath=absoluepath.replace(File.separator, File.separator+File.separator);
		return absoluepath;
	}

	public void selectItemFromListBoxByValue(WebElement webelement, String value) throws InterruptedException  {
		value = value.trim();
		Wait.forElementToBeVisibleAndEnabled(webelement);
		select = new Select(webelement);
		select.selectByValue(value);
	}

	public void selectItemFromListBoxByText(WebElement webelement, String Text) throws InterruptedException{
		Text = Text.trim();
		Wait.forElementToBeVisibleAndEnabled(webelement);
		select = new Select(webelement);
		select.selectByVisibleText(Text);
	}

	public void selectItemFromListBoxByIndex(WebElement webelement, int index) throws InterruptedException{
		Wait.forElementToBeVisibleAndEnabled(webelement);
		select = new Select(webelement);
		select.selectByIndex(index);
	}

	public void selectMultipleItemsFromListBoxByVisibleText(WebElement webelement, String Text) throws InterruptedException {
		String[] tempelements = Text.split(",");
		Wait.forElementToBeVisibleAndEnabled(webelement);
		select = new Select(webelement);
		select.deselectAll();
		for(int i=0; i < tempelements.length; i++) {
			select.selectByVisibleText(tempelements[i].trim());
		}
	}

	public void selectRadioButton(List<WebElement> webelement, String value) {
		value = value.trim();
		boolean flag = false;
		if(webelement.size() > 0){
			for (WebElement element : webelement) {
				if (element.getAttribute("value").equalsIgnoreCase(value)) {
					clickElement(element);
					flag = true;
					break;
				}
			}
		}

		if (flag == false) {
			throw new NoSuchElementException("Cannot locate radio button:"+ "'"+value+"'");
		}
	}

	public List<WebElement> getWebElements(By by) {
		return driver.findElements(by);

	}

	/*Returns the number of elements on the webpage*/
	public int getNumberOfElementsOnPage(By by) {
		return driver.findElements(by).size();
	}

	public String getCurrentUrl() {
		return driver.getCurrentUrl();
	}

	public String getPageTitle() {
		return driver.getTitle();
	}


	public void doubleClick(WebElement webelement) {
		Actions action=new Actions(driver);
		Wait.forElementToBeVisibleAndEnabled(webelement);
		action.doubleClick(webelement).build().perform();
	}

	public void contextClick(WebElement webelement) {
		Actions action=new Actions(driver);
		Wait.forElementToBeVisibleAndEnabled(webelement);
		action.contextClick(webelement).build().perform();
	}

	public static  String getDateTimeStamp() {
		DateFormat dateFormat = new SimpleDateFormat("dd_MM_YYYY_HH_mm_ss");
		String strDate = dateFormat.format(new Date());
		return strDate;
	}
	public static  String getdayandTime() {
		DateFormat dateFormat = new SimpleDateFormat("dd_MM_HH_mm");
		String strDate = dateFormat.format(new Date());
		return strDate;
	}
	public  String getManagementIP() {
		DateFormat IP1 = new SimpleDateFormat("dd");
		DateFormat IP2 = new SimpleDateFormat("MM");
		DateFormat IP3 = new SimpleDateFormat("HH");
		DateFormat IP4 = new SimpleDateFormat("mm");

//		String pos1 = IP1.format(new Date());
//		String pos2 = IP2.format(new Date());
//		String pos3 = IP3.format(new Date());
		
		String pos1 = IP1.format(new Date());
		String pos2 = "255";
		String pos3 = "255";
		String pos4 = "255";
		
		String IP=pos1+":"+pos2+":"+pos3+":"+pos4;

		return IP;
	}

	public void forXseconds(int seconds)
	{
		int milliseconds=seconds*1000;
		
		try {
			Thread.sleep(milliseconds);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public String getTimeStamp() {
		Date date = new Date();
		long timeCurrent = date.getTime();
		return String.valueOf(timeCurrent);
	}

	public String getRandomDigits(int randomdigitlength) {
		String timeStamp = getTimeStamp();
		System.out.println(timeStamp);
		return  timeStamp.substring(timeStamp.length()-randomdigitlength,timeStamp.length());
	}

	public void killProcessByName(String processName) throws IOException {
		Runtime rt = Runtime.getRuntime();
		rt.exec("taskkill /F /IM "+processName);
	}

	public void refreshPage() throws TimeoutException{
		driver.navigate().refresh();	
	}

	public String getWebElementRGBColorCode(WebElement webelement) {
		return webelement.getCssValue("color");

	}

	public String getWebElementRGBBackgroundColorCode(WebElement webelement) {
		return webelement.getCssValue("background-color");

	}

	public String gettext(WebElement webelement)
	{
		Wait.forElementVisibility(webelement);

		return webelement.getText();	
	}

	public String getAttributeValue(WebElement webelement)
	{
		Wait.forElementVisibility(webelement);
		return webelement.getAttribute("value");	
	}
	
	public String getAttributeclass(WebElement webelement)
	{
		Wait.forElementVisibility(webelement);
		return webelement.getAttribute("class");	
	}

	public String getAttributeDataQtip(WebElement webelement)
	{
		Wait.forElementVisibility(webelement);
		return webelement.getAttribute("data-errorqtip");	
	}

	public boolean isDisabled(WebElement webElement)
	{
		Wait.forElementVisibility(webElement);
		String result;
		boolean flag = false;
		result=webElement.getAttribute("aria-disabled").trim();
		if(result.equalsIgnoreCase("true"))
		{
			flag=true;
		}
		else if(result.equalsIgnoreCase("false"))
		{
			flag=false;
		}
		return flag;
	}

	public boolean isChecked(WebElement webElement)
	{
		Wait.forElementVisibility(webElement);
		String result;
		boolean flag = false;
		result=webElement.getAttribute("aria-checked").trim();
		if(result.equalsIgnoreCase("true"))
		{
			flag=true;
		}
		else if(result.equalsIgnoreCase("false"))
		{
			flag=false;
		}
		return flag;
	}

	public boolean isAscending(ArrayList<Integer> values)
	{
		boolean flag=true;
		for (int i = 0; i<values.size()-1; i++) 
		{
			if (values.get(i)>values.get(i+1)) 
			{
				flag=false;
			}

		}
		return flag;

	}

	public boolean isDescending(ArrayList<Integer> values)
	{
		boolean flag=true;
		for (int i = 0; i<values.size()-1; i++) {
			if (values.get(i)<values.get(i+1)) {
				flag=false;
			}
		}
		return flag;
	}

	public  boolean isAscending(List<String> arraylist){
		boolean isSorted=true;
		for(int i=1;i < arraylist.size();i++){
			if(arraylist.get(i-1).compareToIgnoreCase(arraylist.get(i)) > 0)
			{
				isSorted= false;
				break;
			}

		}
		return isSorted;
	}

	public  boolean isDescending(List<String> arraylist){
		boolean isSorted=true;
		for(int i=1;i < arraylist.size();i++){
			if(arraylist.get(i-1).compareToIgnoreCase(arraylist.get(i)) < 0){
				isSorted= false;
				break;
			}
		}
		return isSorted;
	}

	public ArrayList<Integer> getIntegerArray(ArrayList<String> stringArray) {
		ArrayList<Integer> result = new ArrayList<Integer>();
		for(String stringValue : stringArray) {
			try {
				result.add(Integer.parseInt(stringValue));
			} catch(NumberFormatException nfe) {
			} 
		}       
		return result;
	}

	public void mouseHoverJScript(WebElement HoverElement) {
		try {
			if (isDisplayed(HoverElement)) {

				String mouseOverScript = "if(document.createEvent){var evObj = document.createEvent('MouseEvents');evObj.initEvent('mouseover', true, false); arguments[0].dispatchEvent(evObj);} else if(document.createEventObject) { arguments[0].fireEvent('onmouseover');}";
				((JavascriptExecutor) driver).executeScript(mouseOverScript,
						HoverElement);

			} else {
				System.out.println("Element was not visible to hover " + "\n");

			}
		} catch (StaleElementReferenceException e) {
			System.out.println("Element with " + HoverElement
					+ "is not attached to the page document"
					+ e.getStackTrace());
		} catch (NoSuchElementException e) {
			System.out.println("Element " + HoverElement + " was not found in DOM"
					+ e.getStackTrace());
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Error occurred while hovering"
					+ e.getStackTrace());
		}
	}
	/****************************************************************************************************************/	
	/*
	 * TestStep Status 
	 *
	
	public void stepDescriptionStatus(String Description,boolean status)
	{

		if(status==true)
		{
			test.log(LogStatus.PASS, Description,driver);
		}
		else
		{
			test.log(LogStatus.FAIL, Description,driver);

		}
	}

	/***************************************************************************************************************
	
	 * Assertion of boolean
	 
	public void assertion(String Description,boolean Actual,boolean expected)
	{

		if(Actual==expected)
		{
			stepDescriptionStatus(Description,true);
		}
		else
		{
			stepDescriptionStatus(Description,false);

		}
	}

	*//****************************************************************************************************************//*
	
	 * Assertion of Integer
	 
	public void assertion(String Description,int Actual,int expected)
	{

		if(Actual==expected)
		{

			stepDescriptionStatus(Description,true);
		}
		else
		{
			stepDescriptionStatus(Description,false);

		}
	}

	*//****************************************************************************************************************//*
	
	 * Assertion of String
	 
	public void assertion(String Description,String Actual,String expected)
	{
		try
		{
			if(Actual.equalsIgnoreCase(expected))
			{
				stepDescriptionStatus(Description,true);
			}
			else
			{
				stepDescriptionStatus(Description,false);

			}
		}
		catch (NullPointerException e) {
			// TODO: handle exception
			stepDescriptionStatus(Description,false);
		}
	}

	*//****************************************************************************************************************//*
	
	 * Assertion of Double
	 
	public void assertion(String Description,double Actual,double expected)
	{
		if(Actual==expected)
		{
			stepDescriptionStatus(Description,true);
		}
		else
		{
			stepDescriptionStatus(Description,false);

		}
	}
	 */

}
